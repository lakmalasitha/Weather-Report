{"version":3,"sources":["components/WeatherInfo.js","components/WeatherContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","temp","humidity","city","desc","Fragment","className","WeatherContainer","useState","searchQuary","setsearchQuary","undefined","weatherData","setweatherData","isvalidZipCode","setvalidZipCode","placeholder","onChange","event","zipCode","target","value","isvalid","test","validateZipCode","legth","maxLength","onClick","fetch","then","Response","json","main","toFixed","weather","description","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQAGe,SAASA,EAAYC,GAAQ,IAAD,EACRA,EAAMC,KAA/BC,EADiC,EACjCA,KAAKC,EAD4B,EAC5BA,SAASC,EADmB,EACnBA,KAAKC,EADc,EACdA,KACzB,OACG,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,uBACd,yBAAKA,UAAU,QACX,uBAAGA,UAAU,+BAEjB,6BAAK,4BAAKH,IACV,6BAAK,4BAAKC,IACV,8CAAoBH,EAApB,SACA,2CAAiBC,EAAjB,OCTG,SAASK,IACpB,IADuC,EAELC,qBAFK,mBAEjCC,EAFiC,KAErBC,EAFqB,OAGLF,mBAAS,CACvCP,KAAM,KACNC,SAAU,KACVE,KAAO,KACPD,UAAMQ,IAP6B,mBAGjCC,EAHiC,KAGrBC,EAHqB,OASDL,oBAAS,GATR,mBASjCM,EATiC,KASlBC,EATkB,KAmDvC,OACI,6BAAST,UAAU,qBACf,4BAAQA,UAAU,gBACd,8CACA,6BACI,2BAAOA,UAAU,eAAeU,YAAY,WAAWC,SA5CvE,SAA2BC,GACvB,IAAIC,EAASD,EAAME,OAAOC,MACtBC,EAaR,SAAyBH,GAErB,MADW,WACEI,KAAKJ,GAfJK,CAAgBL,GAC9BT,EAAeS,GAEZG,GAAoB,KAAVH,GAAiC,IAAjBG,EAAQG,OACjCf,EAAeS,GACfJ,GAAgB,IAEhBA,GAAgB,IAmC4EW,UAAU,MAC9F,4BAAQpB,UAAU,iBAAiBqB,QAzBnD,WACQb,GAAkC,KAAhBL,EAKlBmB,MAAM,uDAAD,OAAwDnB,EAAxD,qBArCE,qCAsCNoB,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAA7B,GAAI,OAAIa,EAAe,CACzBZ,MAMgBA,EANQD,EAAKgC,KAAK/B,MAOnCA,EAAK,QAAQgC,QAAQ,IANpB/B,SAASF,EAAKgC,KAAK9B,SACnBE,KAAKJ,EAAKkC,QAAQ,GAAGC,YACrBhC,KAAKH,EAAKoC,OAGtB,IAA4BnC,KAbpBc,GAAgB,KAuBR,YAGR,uBAAGT,UAAU,SAASQ,EAAiB,GAAK,oBAC5C,6BAASR,UAAU,gBACU,OAApBM,EAAYX,KACT,mDAAwB,uBAAGK,UAAU,kBAAb,cAE5B,kBAACR,EAAD,CAAaE,KAAMY,MCxDxByB,MATf,WACE,OACE,6BAAS/B,UAAU,iBACjB,kBAACC,EAAD,QCIc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d94aa2ee.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style/Weather.css'\r\n\r\nexport default function WeatherInfo(props) {\r\n    const{temp,humidity,city,desc}=props.data;\r\n    return (\r\n       <React.Fragment>\r\n           <div className=\"weather-description\">\r\n            <div className=\"py-5\">\r\n                <i className=\"wi wi-day-sunny display-1\"></i>\r\n            </div>   \r\n            <div><h2>{city}</h2></div>\r\n            <div><h2>{desc}</h2></div>\r\n            <div>Tempreature : {temp}&deg;C</div> \r\n            <div>Hemadity : {humidity}%</div>         \r\n\r\n           </div>\r\n         \r\n       </React.Fragment>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport '../style/Weather.css';\r\nimport WeatherInfo from '../components/WeatherInfo';\r\n\r\n\r\nexport default function WeatherContainer() {\r\n    const API_KEY ='1d20f2b43484ca794e19ce6a100cfafd';\r\n    const[searchQuary,setsearchQuary]=useState();\r\n    const[weatherData,setweatherData]=useState({\r\n        temp :null,\r\n        humidity :null,\r\n        desc : null,\r\n        city :undefined,\r\n    });\r\n    const[isvalidZipCode,setvalidZipCode]=useState(true);\r\n\r\n  \r\n    function updateSearchQuary(event){\r\n        let zipCode =event.target.value;\r\n        let isvalid = validateZipCode(zipCode);\r\n        setsearchQuary(zipCode);\r\n\r\n        if(isvalid ||zipCode===\"\" || isvalid.legth ===5){\r\n            setsearchQuary(zipCode);\r\n            setvalidZipCode(true);\r\n        }else{\r\n            setvalidZipCode(false);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function validateZipCode(zipCode){\r\n        let regex =/[0-9]{5}/;\r\n        return regex.test(zipCode);\r\n    }\r\n\r\n    function getWeatherData(){\r\n        if(!isvalidZipCode || searchQuary === ''){\r\n            setvalidZipCode(false);\r\n            return;\r\n        }\r\n\r\n            fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${searchQuary},LK&appid=${API_KEY}`)\r\n            .then(Response=>Response.json())\r\n            .then(data => setweatherData({\r\n                temp:convertTempreature(data.main.temp),\r\n                humidity:data.main.humidity,\r\n                desc:data.weather[0].description,\r\n                city:data.name\r\n            }));\r\n    }\r\n    function convertTempreature(temp){\r\n        return(temp-273.15).toFixed(0) ;\r\n    }\r\n\r\n    return (\r\n        <section className=\"weather-container\">\r\n            <header className=\"weather-head\">\r\n                <h3>WEATHER REPORT</h3>\r\n                <div>\r\n                    <input className=\"search-input\" placeholder=\"Zip Code\" onChange={updateSearchQuary} maxLength=\"5\"/>\r\n                    <button className=\"material-icons\" onClick={getWeatherData}>search</button>\r\n                </div>\r\n            </header>\r\n            <p className=\"error\">{isvalidZipCode ? '' : 'Invalid Zip Code'}</p>\r\n            <section className=\"weather-info\">\r\n                    {weatherData.temp=== null ?(\r\n                        <p>No Weather to Display<i className=\"material-icons\">wb_sunny </i></p>\r\n                    ):\r\n                    <WeatherInfo data={weatherData}/>\r\n                    \r\n                }\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport '../style/App.css';\nimport WeatherContainer from '../components/WeatherContainer'\n\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n      <WeatherContainer />\n\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}